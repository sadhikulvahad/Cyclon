<style>
    h2,
    h4 {
        font-weight: bold;
    }

    .order-summary,
    .shipping-payment-section {
        margin-bottom: 30px;
    }

    .shipping-payment-section {
        display: flex;
        justify-content: space-between;
    }

    .cancel-btn {
        margin-top: 20px;
    }

    .table-responsive {
        margin-top: 20px;
    }

    .table thead th {
        background-color: #f8f9fa;
    }

    .shipping-payment-section {
        padding: 15px;
        margin-bottom: 20px;
    }

    .order-summary {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .shipping-address {
        width: 55rem;
        background-color: #e7f3ff;
    }

    .payment-details {
        width: 23rem;
        background-color: #fff3e0;
    }

    .continue-payment-btn {
        color: white;
        margin-top: -40px;
        position: absolute;
    }
</style>


{{> user/header}}

<div class="container mt-5">

    <!-- Order ID and Title -->
    <div class="d-flex justify-content-between align-items-center mb-3" style="font-weight: 500;">
        <span>
            Ordered On : {{formatDate order.createdOn}} | Order Id : {{order.orderId}}
        </span>
        {{#if (eq order.status "delivered")}}<a href="/download-invoice/{{order.orderId}}" class="ml-3"
            style="text-decoration: none !important;">Download
            Invoice <i class="fa-solid fa-chevron-down"></i></a>{{/if}}
    </div>


    <div class="shipping-payment-section border-1">
        <div class="order-summary shipping-address">
            <h4>Shipping Address</h4><br>
            <p class="mb-1" style="font-weight:500;"> Name : {{address.[0].firstName}} {{address.[0].lastName}}</p>
            <p class="mb-1" style="font-weight:500;">HouseNo : {{address.[0].houseNo}} <br> Area :
                {{address.[0].area}}</p>
            <p class="mb-1" style="font-weight:500;"> Landmark : {{address.[0].landmark}}</p>
            <p class="mb-1" style="font-weight:500;">State : {{address.[0].state}}, PinCode: {{address.[0].pincode}}</p>
        </div>

        <div class="order-summary payment-details p-3 border rounded bg-light">
            <h4 class="mb-0">Order Summary :</h4><br>
            <h6>Payment Method:{{#if (eq order.paymentMethod "razorpay")}}RazorPay{{else if (eq order.paymentMethod
                "wallet")}}Wallet{{else}}Cash On Delivery{{/if}}</h6>
            </h6>
            {{#if (eq order.paymentStatus "success")}}
            <span>Payment Status : <span style="color: green;">Success</span></span>
            {{else}}
            <span>Payment Status : <span style="color: red;">Failed</span></span>
            {{/if}}
            <p class="{{#if (eq order.status 'returned')}}text-danger{{/if}}">
                Order Status : {{order.status}}
            </p>


            <div class="d-flex justify-content-between">
                <span>Item(s) Subtotal:</span>
                <span>₹{{subTotal}}</span>
            </div>
            <div class="d-flex justify-content-between">
                <span>Shipping charge:</span>
                <span>₹50</span>
            </div>
            <div class="d-flex justify-content-between">
                <span>Total Price:</span>
                <span>₹{{order.finalPrice}}</span>
            </div>
        </div>
    </div>
    {{#if (eq order.paymentStatus "failed")}}
    <div class="d-flex justify-content-end ">
        <button id="retryButton" style="color: white;" class=" btn btn-success continue-payment-btn">continue
            payment</button>
    </div>
    {{/if}}

    <h4>Items Ordered</h4>
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                {{#each order.orderdItems}}
                <tr>
                    <td>{{this.product.productName}}</td>
                    <td>{{this.quantity}}</td>
                    <td>₹{{this.price}}</td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between">
        <a href="/orders" class="btn btn-secondary">Back to Orders</a>
        {{#if (eq order.status "delivered")}}
        <button class="btn btn-danger return-btn" onclick="returnOrder('{{order.orderId}}')">Return order</button>
        {{else}}
        {{#if (eq order.status "return Request")}}
        <button class="btn btn-danger cancelReturn-btn">Cancel Return</button>
        {{else}}
        {{#if (eq order.status "returned")}}
        <button class="btn btn-danger cancelReturn-btn" {{#if (eq order.status "returned" )}}disabled{{/if}}>Cancel
            Return</button>
        {{else}}
        <button class="btn btn-danger cancel-btn" onclick="cancelOrder('{{order.orderId}}')" {{#if (eq
            order.status "cancelled" )}}disabled{{/if}}>Cancel Order</button>
        {{/if}}
        {{/if}}
        {{/if}}
    </div>
</div>

<!-- Cancel Confirmation Modal -->
<div class="modal fade" id="cancelConfirmModal" tabindex="-1" aria-labelledby="cancelConfirmLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelConfirmLabel">Confirm Cancellation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to cancel this order?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" id="confirmCancelBtn">Yes, Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- return Confirmation Modal -->
<div class="modal fade" id="returnConfirmModal" tabindex="-1" aria-labelledby="cancelConfirmLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelConfirmLabel">Confirm your Return</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to return this order?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" id="confirmReturnBtn">Yes, Retrun</button>
            </div>
        </div>
    </div>
</div>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.min.js"></script>



<script>
    let selectedOrderId = null;

    function cancelOrder(orderId) {
        selectedOrderId = orderId;
        const cancelModal = new bootstrap.Modal(document.getElementById('cancelConfirmModal'));
        cancelModal.show();
    }

    function returnOrder(orderId) {
        selectedOrderId = orderId
        const returnModal = new bootstrap.Modal(document.getElementById('returnConfirmModal'))
        returnModal.show()
    }

    document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('confirmCancelBtn').addEventListener('click', function () {
            if (selectedOrderId) {
                fetch(`/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ orderId: selectedOrderId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = '/orders';
                        } else {
                            console.error('Error:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        });



        document.getElementById('retryButton').addEventListener('click', function () {
            const orderId = "{{order.orderId}}"; // Handlebars template variable
            const finalPriceString = '{{ order.finalPrice }}'; // Handlebars template variable
            const finalPrice = Number(finalPriceString)

            fetch(`/retryPayment/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(res => res.json())
                .then(order => {
                    if (order.success) {
                        const orderId = order.orderId
                        const options = {
                            key: order.razorpayKey,
                            amount: (finalPrice) * 100,
                            currency: "INR",
                            order_id: order.id,
                            handler: function (response) {
                                fetch('/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature
                                    })


                                }).then(res => {
                                    return res.json()
                                })
                                    .then(res => {
                                        if (res) {
                                            window.location.href = `/orderSuccess/${orderId}`;
                                        } else {
                                            showError('Payment verification failed.');
                                            updatePaymentStatus(orderId, 'failed')
                                        }
                                    }).catch(err => {
                                        console.error('Verification Error:', err);
                                        showError('Error occurred while verifying payment.');
                                        updatePaymentStatus(orderId, 'failed')
                                    })
                            },
                            modal: {
                                ondismiss: function () {
                                    // Handle modal close
                                    showError('Payment process was cancelled.');
                                    updatePaymentStatus(orderId, 'failed')
                                }
                            }
                        };

                        const rzp1 = new Razorpay(options);
                        rzp1.open(); // Open the Razorpay modal
                    } else {
                        showError('Failed to initiate retry payment. Razorpay Order ID missing.');
                    }
                })
                .catch(err => {
                    console.error('Error:', err);
                    showError('Error occurred while retrying payment: ' + err.message);
                });
        });
    })


    function showError(message) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: message,
        });
    }


    function updatePaymentStatus(orderId, status) {
        console.log('asdjhkfgkjh')
        fetch('/updatePaymentStatus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                orderId: orderId,
                status: status
            })
        }).then(res => res.json())
            .then(data => {
                if (data.success) {
                    console.log('Payment status updated to:', status);
                } else {
                    console.error('Failed to update payment status:', data.message);
                }
            }).catch(err => {
                console.error('Error updating payment status:', err);
            });
    }


    document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('confirmReturnBtn').addEventListener('click', function () {
            if (selectedOrderId) {
                fetch(`/return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ orderId: selectedOrderId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = '/orders';
                        } else {
                            console.error('Error:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        });
    });


</script>