<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <style>
        .custom-date {
            display: none;
        }

        .custom-date.show {
            display: block;
        }

        #salesTable {
            display: none;
        }

        @media (max-width: 768px) {
            .col-md-3 {
                margin-bottom: 10px;
            }
        }

        .modal-xl {
            max-width: 90%;
        }

        .top-selling-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .list-group-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .item-name {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .item-count {
            margin-left: 10px;
            min-width: 50px;
            text-align: right;
        }

        .btn-lg {
            margin-top: -10px;
            margin-bottom: 10px;
            margin-right: 20px;
        }

        #barChart {
            width: 100%;
            height: 400px;
        }
    </style>
</head>

<body>
    {{> admin/header}}
    <div class="container mt-4">
        <h1 class="mb-4">Sales Report</h1>
        <div class="d-flex justify-content-end mt-3" style="margin-top: -10px; margin-right: 20px;">
            <button id="showTopSelling" class="btn btn-info btn-lg" data-bs-toggle="modal"
                data-bs-target="#topSellingModal">
                Show Top 10 Selling
            </button>
        </div>
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Total Orders</h5>
                        <p id="totalOrders" class="card-text">₹{{totalOrders}}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Total Revenue</h5>
                        <p id="totalRevenue" class="card-text">₹{{totalRevenue}}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Total Discount</h5>
                        <p id="totalDiscount" class="card-text">₹{{totalDiscount}}</p>
                    </div>
                </div>
            </div>
        </div>



        <div class="row mb-4">
            <div class="col-md-3">
                <select id="filterType" class="form-select">
                    <option value="daily">Daily</option>
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                    <option value="yearly">Yearly</option>
                    <option value="custom">Custom</option>
                </select>
            </div>
            <div class="col-md-3 custom-date">
                <input type="date" id="startDate" class="form-control" placeholder="Start Date">
            </div>
            <div class="col-md-3 custom-date">
                <input type="date" id="endDate" class="form-control" placeholder="End Date">
            </div>
            <div class="col-md-3">
                <button id="applyFilter" class="btn btn-primary">Apply Filter</button>
            </div>
        </div>

        <div class="d-flex justify-content-end mt-3">
            <button id="downloadPdf" class="btn btn-danger me-2">Download PDF</button>
            <button id="downloadExcel" class="btn btn-success">Download Excel</button>
        </div>

        <canvas id="barChart" width="100" height="50"></canvas>

        <table id="salesTable" class="table table-striped">
            <thead>
                <tr>
                    <th>Order Id</th>
                    <th>Username</th>
                    <th>Total Amount</th>
                    <th>Final Amount</th>
                    <th>Status</th>
                    <th>Payment Method</th>
                    <th>Created At</th>
                </tr>
            </thead>
            <tbody id="salesTableBody">
                {{#each orders}}
                <tr>
                    <td>{{increment @index}}</td>
                    <td>{{userId.name}}</td>
                    <td>₹{{totalPrice}}</td>
                    <td>₹{{finalPrice}}</td>
                    <td>{{status}}</td>
                    <td>{{paymentMethod}}</td>
                    <td>{{formatDate createdOn}}</td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>


    <!-- Modal for Top 10 Selling Products, Brands, and Types -->
    <div class="modal fade" id="topSellingModal" tabindex="-1" aria-labelledby="topSellingModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-light">
                    <h5 class="modal-title fw-bold" id="topSellingModalLabel">Top 10 Selling Products, Brands, and Types
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4 mb-4">
                            <h5 class="text-center mb-3">Top 10 Products</h5>
                            <ul id="topProducts" class="list-group list-group-flush top-selling-list"></ul>
                        </div>
                        <div class="col-md-4 mb-4">
                            <h5 class="text-center mb-3">Top 10 Brands</h5>
                            <ul id="topBrands" class="list-group list-group-flush top-selling-list"></ul>
                        </div>
                        <div class="col-md-4 mb-4">
                            <h5 class="text-center mb-3">Top 10 Types</h5>
                            <ul id="topTypes" class="list-group list-group-flush top-selling-list"></ul>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>




    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>

        document.addEventListener('DOMContentLoaded', function () {
            let barChart;

            const filterType = document.getElementById('filterType');
            const applyFilter = document.getElementById('applyFilter');
            const salesTable = document.getElementById('salesTable');
            const salesTableBody = document.getElementById('salesTableBody');
            const totalOrders = document.getElementById('totalOrders');
            const totalRevenue = document.getElementById('totalRevenue');
            const totalDiscount = document.getElementById('totalDiscount')
            const customDateFields = document.querySelectorAll('.custom-date');

            filterType.addEventListener('change', function () {
                if (filterType.value === 'custom') {
                    customDateFields.forEach(field => field.classList.add('show'));
                } else {
                    customDateFields.forEach(field => field.classList.remove('show'));
                }
            });

            function initBarChart(labels, data) {
                const ctx = document.getElementById('barChart').getContext('2d'); 
                if (barChart) {
                    barChart.destroy(); 
                }
                barChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Sales Amount',
                            data: data,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            function aggregateDataForChart(orders, selectedFilter) {
                let labels = [];
                let salesData = [];

                switch (selectedFilter) {
                    case 'daily':
                        labels = orders.map(order => order.createdOn.slice(11, 16)); 
                        salesData = orders.map(order => order.finalPrice);
                        break;

                    case 'weekly':
                        labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
                        let weeklyData = new Array(7).fill(0); 
                        orders.forEach(order => {
                            const day = new Date(order.createdOn).getDay(); 
                            weeklyData[day === 0 ? 6 : day - 1] += order.finalPrice; 
                        });
                        salesData = weeklyData;
                        break;

                    case 'monthly':
                        let weeksInMonth = {};
                        orders.forEach(order => {
                            const week = Math.ceil(new Date(order.createdOn).getDate() / 7); 
                            weeksInMonth[week] = (weeksInMonth[week] || 0) + order.finalPrice;
                        });
                        labels = Object.keys(weeksInMonth).map(week => `Week ${week}`);
                        salesData = Object.values(weeksInMonth);
                        break;

                    case 'yearly':
                        labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                        let yearlyData = new Array(12).fill(0);
                        orders.forEach(order => {
                            const month = new Date(order.createdOn).getMonth(); 
                            yearlyData[month] += order.finalPrice;
                        });
                        salesData = yearlyData;
                        break;

                    case 'custom':
                        orders.forEach(order => {
                            const day = order.createdOn.slice(0, 10); 
                            if (!labels.includes(day)) {
                                labels.push(day);
                                salesData.push(order.finalPrice);
                            } else {
                                const index = labels.indexOf(day);
                                salesData[index] += order.finalPrice;
                            }
                        });
                        break;
                }

                return { labels, salesData };
            }

            applyFilter.addEventListener('click', function () {
                const selectedFilter = filterType.value;
                let startDate = '';
                let endDate = '';

                if (selectedFilter === 'custom') {
                    startDate = document.getElementById('startDate').value;
                    endDate = document.getElementById('endDate').value;

                    if (!startDate || !endDate) {
                        showError('Please select both start and end dates for custom filter.');
                        return;
                    }
                }

                fetch('/admin/salesReport', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        filterType: selectedFilter,
                        startDate: startDate,
                        endDate: endDate
                    })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to fetch sales data');
                        }
                        return response.json();
                    })
                    .then(data => {
                        salesTable.style.display = 'table';

                        salesTableBody.innerHTML = '';

                        totalOrders.textContent = data.totalOrders;
                        totalRevenue.textContent = `₹${data.totalRevenue}`;
                        totalDiscount.textContent = `₹${data.totalDiscount}`;

                        data.orders.forEach((order, index) => {
                            const row = `<tr>
                    <td>${index + 1}</td>
                    <td>${order.userId.name}</td>
                    <td>₹${order.totalPrice}</td>
                    <td>₹${order.finalPrice}</td>
                    <td>${order.status}</td>
                    <td>${order.paymentMethod}</td>
                    <td>${order.createdOn}</td>
                </tr>`;
                            salesTableBody.insertAdjacentHTML('beforeend', row);
                        });

                        const { labels, salesData } = aggregateDataForChart(data.orders, selectedFilter);

                        initBarChart(labels, salesData);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showError('An error occurred while fetching the sales report: ' + error.message);
                    });
            });
        });

        document.getElementById('downloadPdf').addEventListener('click', function () {
            const filterType = document.getElementById('filterType').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            fetch('/admin/salesPdfReport', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    filterType,
                    startDate,
                    endDate
                })
            })
                .then(response => response.blob())
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'sales-report.pdf';
                    document.body.appendChild(a);
                    a.click();
                    a.remove();
                })
                .catch(error => console.error('Error downloading PDF:', error));
        });

        document.getElementById('downloadExcel').addEventListener('click', function () {
            const filterType = document.getElementById('filterType').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            fetch('/admin/salesExcelReport', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    filterType,
                    startDate,
                    endDate
                })
            })
                .then(response => response.blob())
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'sales-report.xlsx';
                    document.body.appendChild(a);
                    a.click();
                    a.remove();
                })
                .catch(error => console.error('Error downloading Excel:', error));
        });



        document.getElementById('showTopSelling').addEventListener('click', function () {
            fetch('/admin/topSelling', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const productsList = document.getElementById('topProducts');
                        productsList.innerHTML = '';
                        data.topSellingProducts.forEach(product => {
                            productsList.innerHTML += `
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>${product.productName}</span>
                        <span>${product.totalSales} sales</span>
                    </li>`;
                        });

                        const brandsList = document.getElementById('topBrands');
                        brandsList.innerHTML = '';
                        data.topSellingBrands.forEach(brand => {
                            brandsList.innerHTML += `
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>${brand.brand}</span>
                        <span>${brand.totalSales} sales</span>
                    </li>`;
                        });

                        const typesList = document.getElementById('topTypes');
                        typesList.innerHTML = '';
                        data.topSellingTypes.forEach(type => {
                            typesList.innerHTML += `
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>${type.category}</span>
                        <span>${type.totalSales} sales</span>
                    </li>`;
                        });
                    }
                })
                .catch(error => console.error('Error fetching top selling data:', error));
        });

        document.addEventListener("DOMContentLoaded", () => {
            new ApexCharts(document.querySelector("#barChart"), {
                series: [{
                    data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]
                }],
                chart: {
                    type: 'bar',
                    height: 350
                },
                plotOptions: {
                    bar: {
                        borderRadius: 4,
                        horizontal: true,
                    }
                },
                dataLabels: {
                    enabled: false
                },
                xaxis: {
                    categories: ['South Korea', 'Canada', 'United Kingdom', 'Netherlands', 'Italy', 'France', 'Japan',
                        'United States', 'China', 'Germany'
                    ],
                }
            }).render();
        });

        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: message,
            });
        }

    </script>
</body>

</html>